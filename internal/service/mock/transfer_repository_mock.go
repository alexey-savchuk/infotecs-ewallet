// Code generated by MockGen. DO NOT EDIT.
// Source: transfer_repository.go
//
// Generated by this command:
//
//	mockgen -source=transfer_repository.go -destination=mock/transfer_repository_mock.go -package service_mock
//

// Package service_mock is a generated GoMock package.
package service_mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/alexey-savchuk/infotecs-ewallet/internal/repository"
	service "github.com/alexey-savchuk/infotecs-ewallet/internal/service"
	gomock "go.uber.org/mock/gomock"
)

// MockTransferRepository is a mock of TransferRepository interface.
type MockTransferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransferRepositoryMockRecorder
}

// MockTransferRepositoryMockRecorder is the mock recorder for MockTransferRepository.
type MockTransferRepositoryMockRecorder struct {
	mock *MockTransferRepository
}

// NewMockTransferRepository creates a new mock instance.
func NewMockTransferRepository(ctrl *gomock.Controller) *MockTransferRepository {
	mock := &MockTransferRepository{ctrl: ctrl}
	mock.recorder = &MockTransferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferRepository) EXPECT() *MockTransferRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransferRepository) Create(ctx context.Context, transfer *service.Transfer) (*repository.DBTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, transfer)
	ret0, _ := ret[0].(*repository.DBTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransferRepositoryMockRecorder) Create(ctx, transfer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransferRepository)(nil).Create), ctx, transfer)
}

// GetAllByWalletID mocks base method.
func (m *MockTransferRepository) GetAllByWalletID(ctx context.Context, walletID string) ([]repository.DBTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByWalletID", ctx, walletID)
	ret0, _ := ret[0].([]repository.DBTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByWalletID indicates an expected call of GetAllByWalletID.
func (mr *MockTransferRepositoryMockRecorder) GetAllByWalletID(ctx, walletID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByWalletID", reflect.TypeOf((*MockTransferRepository)(nil).GetAllByWalletID), ctx, walletID)
}
